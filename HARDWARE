=== How to replicate the c-lab c_locc
== What you need
 * A router capable of running OpenWRT, if possible with at least one USB Host port
 * An arduino (the small ones are fine, though any should work)
 * An old rotary dial telephone, USB keypad or other input device of your choice
 * A few LEDs as indicator lamps (optional)
 * A Burg-Wächter TSE electronic cylinder programmed with a known key code

== System overview
The c_locc software runs on the router. It is written in C (by lynxis) and does most of the work. The uid/pin validation logic runs on some server configured for ldap-access and is being communicated to by the router via json-rpc over an ssl-tunnel using client certificates. The router software may also be controlled via ubus (some crappy-but-tiny local bus akin to dbus). The router software can directly address USB keypads or keyboards. Other keypads as well as the telephone are connected to the arduino, which in turn talks to the router via serial-over-usb. We tried to do this over both the primary and the auxiliary serial port of the router, but none of both would work due to chars being lost to other parties listening on the port or gibberish being sent to the port by the linux kernel. Since our router had two usb ports, we took the easier and more reliable way. Software-wise it does not matter as both ends of the channel only see the serial port-abstraction running atop usb.
The arduino firmware currently is capable of driving a gutted standard rotary-dial telephone, it uses one contact (hangup) for flow control ("begin uid/pin input sequence", "end uid/pin input sequence and check code") and the two contacts of the rotary dial for number input. The pinout of that stuff you will best look up in the source yourself sinc I doo not remember it, though logically they should at least all be connected to shunt the internal pullups of the arduino to ground.
There is a provision in the arduino firmware to control three LEDs connected to one pin each to indicate the current lock status, though that did not work on my last trial and neither I nor lynxis have an idea where that bug has built its nest.
The TSE cylinder is connected to the arduino via a circuit described further down. The cylinder has a three-pin interface consisting of one ground, one data and one VCC (+5V) pin. One pin of the arduino directly talks to the cylinder's data line, another pin switches the cylinder on and off via a photocoupler. Do not ask why we do not just use a transistor here, this part of the circuit was *heavy* trial-and-error since the cylinder is pretty picky about what happens on its VCC line. The cylinder is turned on and off for each "transaction" because, according to lynxis, otherwise it would sometimes "hang up" and not react on further "open" commands until power cycled.

== How to build (the mechanics)
You are pretty free to build this in any way imaginable, though I will now describe how we built the c-lab one. The router is a ASUS WL-500 Premium housed in its standard plastic case. This case is mounted to the door via two screws and its standard wall-mount notches. We removed the mini-pci wlan card from the mainboard since we do not need it since the router talks to the network via LAN (which -- at least in c-base -- is *way* more reliable, anyway). The gained space is where we mounted the arduino, though technically it is indeed possible to cram it next to the wlan card.  I built a diy-protoshield from some pin headers and some proto board (FIXME add picture). On this ghetto-protoshield the electronics are mounted next to two 2*5-pin pin headers glued to the PCB sideways, the lower row being soldered down and connected thus, the upper row being directly connected with wires. If you copy this design, please solder the pin headers on small pieces of protoboard and mount these to the pcb (via glue or such) in order to prevent the pins from coming loose under mechanical stress. Each of those connectors is crimped to rainbow-colored flat ribbon cable which is soldered to the board-mount side of 10-pin pluggable luster terminals. Their pin spacing is probably about 5mm and thus you can fit their pins quite nicely through the air holes in the lid of the WL-500's case. The various wires heading off to the various other parts of the construction are just screwed to the luster terminals and mounted to the door with adhesive plastic clamps we had lying around. Actually, that part is also done nicely with tape.
The arduino's USB interface is soldered to one of the (external) USB ports of the router.

FIXME pictures of the actual construction, especially the arduino shield

== How to build (the electronics)
The telephone and LED interfaces are pretty straight-forward. For the switches: Just connect one side to ground, the other side to any pin (configurable per software, best is you just look it up in the sources). Handle the LED likewise, though here you must care for the polarity and you will need a series resistor (I suggest 330 ohms).
The GND pin of the cylinder is directly connected to ground. The data pin is directly connected to a pin of the arduino, which one you can configure. The VCC pin is connected to VCC via the transistor side of a photocoupler. The LED side is connected to an arduino pin via a series resistor. The VCC of the cylinder is buffered with a 10.000µF (yeah, thats ten thousand) against ground. This cap really needs to be that big. I tried it, and with pretty much anything less the lock would pull its own VCC down enough to drive the internal µC into brown-out). A schematic of the relevant parts is in "schematics.gif", ***including the TSE cylinder's pinout***.
-- Cylinder Pin assignment
 * Orange -- Ground
 * Red -- VCC
 * Brown -- Data

== Any questions?
e-mail or jabber to jaseg@c-base.org
